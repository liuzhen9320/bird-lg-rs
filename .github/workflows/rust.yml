# eslint-disable yml/no-empty-mapping-value
name: Rust

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: Enable debugging
        required: false
        default: false
env:
  CARGO_TERM_COLOR: always

jobs:
  # Job  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  build:
    name: job ❯ build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]

    steps:
      # ─────────────────────────────────────────────────────
      - name: Bootstrap ❯❯ actions/checkout@v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ─────────────────────────────────────────────────────
      - name: Bootstrap ❯❯ Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          components: 'rustfmt'

      # ─────────────────────────────────────────────────────
      - name: Bootstrap ❯❯ Preinstall & Prepare Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-dev openssl libssl-dev
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml)" >> "$GITHUB_ENV"
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ─────────────────────────────────────────────────────
      - name: Bootstrap ❯❯ Debug ❯❯ Show version information (Rust, cargo, GCC)
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Bootstrap ❯❯ Restore Rust Cache
        uses: Swatinem/rust-cache@v2

      # ─────────────────────────────────────────────────────
      - name: Rust ❯❯ Build Proxy
        run: |
          echo "✨ Building proxy..."
          RUSTFLAGS="-C strip=symbols -C target-cpu=generic -C link-arg=-s" \
          cargo build --release --bin bird-lgproxy-rs -p bird-lgproxy-rs --target=${{ matrix.target }}
          strip target/${{ matrix.target }}/release/bird-lgproxy-rs 2>/dev/null || true
          ls -la target/${{ matrix.target }}/release/
          echo "✨ Proxy build completed!"

      - name: Rust ❯❯ Build Frontend
        env:
          TARGET: ${{ matrix.target }}
        run: |
          echo "✨ Building frontend..."
          if [ "$TARGET" = "x86_64-unknown-linux-musl" ]; then
            docker run --rm -v "$PWD":/home/rust/src \
              ghcr.io/rust-cross/rust-musl-cross:x86_64-musl \
              cargo build --release \
              --bin bird-lg-rs \
              -p bird-lg-rs \
              --target="$TARGET"
          else
          export RUSTFLAGS="-C strip=symbols -C target-cpu=generic -C link-arg=-s"
          cargo build --release \
            --bin bird-lg-rs \
            -p bird-lg-rs \
            --target="$TARGET"
          fi
          strip target/${{ matrix.target }}/release/bird-lg-rs 2>/dev/null || true
          ls -la target/${{ matrix.target }}/release/
          echo "✨ Frontend build completed!"

      # ─────────────────────────────────────────────────────
      - name: Post hooks ❯❯ Upload bird-lgproxy-rs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}__bird-lgproxy-rs
          path: target/${{ matrix.target }}/release/bird-lgproxy-rs
          retention-days: 30

      - name: Post hooks ❯❯ Upload bird-lg-rs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}__bird-lgproxy-rs
          path: target/${{ matrix.target }}/release/bird-lg-rs
          retention-days: 30
